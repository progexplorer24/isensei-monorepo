// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Cypress$IsenseiMonorepo from "../../../../packages/bindings/cypress/Cypress.mjs";

Cypress$IsenseiMonorepo.context("Assertions", function (param) {
  Cypress$IsenseiMonorepo.beforeEach(function (param) {
    cy.visit("https://example.cypress.io/commands/assertions", undefined);
  });
  Cypress$IsenseiMonorepo.describe("Implicit Assertions", function (param) {
    Cypress$IsenseiMonorepo.it(
      ".should() - make an assertion about the current subject",
      function (param) {
        Cypress$IsenseiMonorepo.shouldMatchRe(
          Cypress$IsenseiMonorepo.shouldMatchP(
            Cypress$IsenseiMonorepo.shouldHaveHtmlP(
              Cypress$IsenseiMonorepo.shouldContainP(
                Cypress$IsenseiMonorepo.shouldHaveTextP(
                  Cypress$IsenseiMonorepo.shouldHaveClassP(
                    cy
                      .get(".assertion-table", undefined)
                      .find(
                        "tbody tr:last",
                        Cypress$IsenseiMonorepo.FindOptions.make(
                          undefined,
                          undefined,
                          undefined,
                          undefined
                        )
                      ),
                    "success"
                  )
                    .find("td", undefined)
                    .first(undefined),
                  "Column content"
                ),
                "Column content"
              ),
              "Column content"
            ),
            "td"
          ).invoke("text"),
          /column content/i
        );
        return Cypress$IsenseiMonorepo.shouldBeVisible(
          cy
            .get(".assertion-table", undefined)
            .find("tbody tr:last", undefined)
            .contains("td", /column content/i, undefined)
        );
      }
    );
    return Cypress$IsenseiMonorepo.it(
      ".and() - chain multiple assertions together",
      function (param) {
        return Cypress$IsenseiMonorepo.andInclude(
          Cypress$IsenseiMonorepo.andHaveAttrP(
            Cypress$IsenseiMonorepo.shouldHaveClassP(
              cy.get(".assertions-link", undefined),
              "active"
            ),
            "href"
          ),
          "cypress.io"
        );
      }
    );
  });
  return Cypress$IsenseiMonorepo.describe(
    "Explicit Assertions",
    function (param) {
      Cypress$IsenseiMonorepo.it(
        "expect - make an assertion about a specified subject",
        function (param) {
          Cypress$IsenseiMonorepo.expect(true).equal(true);
          Cypress$IsenseiMonorepo.expect(false).not.equal(true);
          var o = {
            foo: "bar",
          };
          Cypress$IsenseiMonorepo.expect(o).equal(o);
          Cypress$IsenseiMonorepo.expect(o).to.deep.equal({
            foo: "bar",
          });
          Cypress$IsenseiMonorepo.expect("FooBar").match(/bar$/i);
        }
      );
      Cypress$IsenseiMonorepo.it(
        "pass your own callback function to should()",
        function (param) {
          cy.get(".assertions-p", undefined)
            .find("p", undefined)
            .should(function (p) {
              var paragraphsRaw = p.get();
              var paragraphs = paragraphsRaw.map(function (element) {
                return element.textContent;
              });
              Cypress$IsenseiMonorepo.expectWithDescription(
                p,
                "has 3 paragraphs"
              ).to.have.length(3);
              Cypress$IsenseiMonorepo.expectWithDescription(
                paragraphs,
                "has expected text in each paragraph"
              ).to.deep.equal([
                "Some text from first p",
                "More text from second p",
                "And even more text from third p",
              ]);
            });
        }
      );
      Cypress$IsenseiMonorepo.it(
        "finds element by class name regex",
        function (param) {
          cy.get(".docs-header", undefined)
            .find("div", undefined)
            .should(function (divRaw) {
              var div = divRaw.get();
              Cypress$IsenseiMonorepo.expect(div).to.have.length(1);
              var className = Caml_array.get(div, 0).className;
              Cypress$IsenseiMonorepo.expect(className).match(/heading-/);
            })
            .then(function (div) {
              Cypress$IsenseiMonorepo.expectWithDescription(
                div,
                "text content"
              ).to.have.text("Introduction");
            });
        }
      );
      Cypress$IsenseiMonorepo.it(
        "matches unknown text between two elements",
        function (param) {
          var text = {
            contents: "",
          };
          var normalizeText = function (s) {
            return s.replace(/\s/g, "").toLowerCase();
          };
          cy.get(".two-elements", undefined)
            .find(".first", undefined)
            .then(function (firstRaw) {
              var first = firstRaw.get();
              console.log(first);
              text.contents = normalizeText(
                Caml_array.get(first, 0).textContent
              );
            });
          cy.get(".two-elements", undefined)
            .find(".second", undefined)
            .should(function (divRaw) {
              var div = divRaw.get();
              var secondText = normalizeText(
                Caml_array.get(div, 0).textContent
              );
              Cypress$IsenseiMonorepo.expectWithDescription(
                secondText,
                "second text"
              ).equal(text.contents);
            });
        }
      );
      Cypress$IsenseiMonorepo.it(
        "includes all chai examples",
        function (param) {
          Cypress$IsenseiMonorepo.expect({
            a: 1,
          }).to.deep.equal({
            a: 1,
          });
          Cypress$IsenseiMonorepo.expect({
            a: 1,
          }).not.equal({
            a: 1,
          });
          Cypress$IsenseiMonorepo.expect([
            {
              a: 1,
            },
          ]).to.deep.include({
            a: 1,
          });
          Cypress$IsenseiMonorepo.expect([
            {
              a: 1,
            },
          ]).not.to.include({
            a: 1,
          });
          Cypress$IsenseiMonorepo.expect({
            x: {
              a: 1,
            },
          }).to.deep.include({
            x: {
              a: 1,
            },
          });
          Cypress$IsenseiMonorepo.expect({
            x: {
              a: 1,
            },
          }).not.to.include({
            x: {
              a: 1,
            },
          });
          Cypress$IsenseiMonorepo.expect([
            {
              a: 1,
            },
          ]).to.have.deep.members([
            {
              a: 1,
            },
          ]);
          Cypress$IsenseiMonorepo.expect([
            {
              a: 1,
            },
          ]).not.to.have.members([
            {
              a: 1,
            },
          ]);
          Cypress$IsenseiMonorepo.expect([1, 2, 3]).to.include(2);
          Cypress$IsenseiMonorepo.expect("foobar").to.include("foo");
          Cypress$IsenseiMonorepo.expect({
            a: 1,
            b: 2,
            c: 3,
          }).to.include({
            a: 1,
            b: 2,
          });
          Cypress$IsenseiMonorepo.expect([]).to.deep.equal([]);
        }
      );
      return Cypress$IsenseiMonorepo.it(
        "retries the should callback until assertions pass",
        function (param) {
          cy.get("#random-number", undefined).should(function (divRaw) {
            var div = divRaw.get();
            var n = Belt_Int.fromString(Caml_array.get(div, 0).textContent);
            Cypress$IsenseiMonorepo.expect(n).to.be.gte(1).to.be.lte(10);
          });
        }
      );
    }
  );
});

export {};
/*  Not a pure module */
